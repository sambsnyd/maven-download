/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.openrewrite.InMemoryExecutionContext;
import org.openrewrite.maven.MavenDownloadingException;
import org.openrewrite.maven.MavenExecutionContextView;
import org.openrewrite.maven.MavenSettings;
import org.openrewrite.maven.cache.LocalMavenArtifactCache;
import org.openrewrite.maven.cache.MavenArtifactCache;
import org.openrewrite.maven.internal.MavenPomDownloader;
import org.openrewrite.maven.tree.*;
import org.openrewrite.maven.utilities.MavenArtifactDownloader;

import java.nio.file.Path;
import java.nio.file.Paths;

public class App {

    public static void main(String[] args) {
        GroupArtifactVersion gav;
        if (args.length > 0) {
            String[] parts = args[0].split(":");
            gav = new GroupArtifactVersion(parts[0], parts[1], parts[2]);
        } else {
            gav = new GroupArtifactVersion("io.netty", "netty-tcnative-boringssl-static", "2.0.26.Final");
        }
        MavenExecutionContextView ctx = MavenExecutionContextView.view(new InMemoryExecutionContext());
        MavenSettings settings = MavenSettings.readMavenSettingsFromDisk(ctx);
        if (settings == null) {
            System.out.println("No Maven settings found on disk");
        } else {
            System.out.println("Loaded Maven settings");
            if(settings.getActiveProfiles() == null) {
                System.out.println("No active profiles");
            } else {
                System.out.println(settings.getActiveProfiles().getActiveProfiles().size() + " active profiles:");
                for (String activeProfile : settings.getActiveProfiles().getActiveProfiles()) {
                    System.out.println("    " + activeProfile);
                }
            }
        }

        ctx.setMavenSettings(settings);
        System.out.println(ctx.getRepositories().size() + " repositories in use");
        for (MavenRepository repository : ctx.getRepositories()) {
            System.out.println("    " + repository.getUri());
        }

        MavenPomDownloader mpd = new MavenPomDownloader(ctx);

        System.out.println("Downloading pom for " + gav);
        try {
            Pom pom = mpd.download(gav, null, null, ctx.getRepositories());
            System.out.println("Downloaded " + pom.getGav() + " from " + (pom.getRepository() == null ? "unknown uri" : pom.getRepository().getUri()));
        } catch (MavenDownloadingException e) {
            System.out.println("Failed to download pom for " + gav);
        }
        System.out.println("Downloading jar for " + gav);
        MavenArtifactCache artifactCache = new LocalMavenArtifactCache(Paths.get(System.getProperty("user.home"), ".rewrite", "download-debug"));
        MavenArtifactDownloader mad = new MavenArtifactDownloader(artifactCache, settings, it -> {
            if(it instanceof RuntimeException) {
                throw (RuntimeException) it;
            }
            throw new RuntimeException(it);
        });
        for (MavenRepository repository : ctx.getRepositories()) {
            try {
                System.out.println("Attempting to download from " + repository.getUri());
                ResolvedDependency build = ResolvedDependency.builder()
                        .gav(new ResolvedGroupArtifactVersion(repository.getUri(), gav.getGroupId(), gav.getArtifactId(), gav.getVersion(), null))
                        .repository(repository)
                        .requested(Dependency.builder()
                                .gav(gav)
                                .build())
                        .build();
                Path path = mad.downloadArtifact(build);
                System.out.println("Downloaded " + path);
            } catch (Exception e) {
                System.out.println("Failed to download from " + repository.getUri());
            }
        }
    }
}
